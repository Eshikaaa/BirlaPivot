spring.application.name=endUser

server.port=8081
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id= group-1
spring.kafka.consumer.auto-offset-reset= earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#
#
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.value-deserializer.value-class=com.enduser.endUser.model.Location
#
#spring.kafka.consumer.properties.spring.json.trusted.packages=com.enduser.endUser.model


# Key deserializer
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Value deserializer with error handling
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
#spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer

# JSON deserializer configuration
#spring.kafka.consumer.properties.spring.json.value.default.type=com.enduser.endUser.model.Location






spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
  spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
  spring.kafka.consumer.properties.spring.deserializer.value.default.type=com.example.shared-location-model.SharedLocation

#  spring.kafka.topic=location-update# Allowing deserialization of custom classes like Inventory
  spring.kafka.consumer.properties.spring.json.trusted.packages=*